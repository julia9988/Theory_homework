Questions Testing 1
Тестирование - Это поиск несоответствия между фактическим и ожидаемым результатом 
Тестинг - проверка создаваемого программного продукта на соответствие требованиям к этому продукту.
QC (quality control) - включает в себя тестирование, но не ограничивается им, обеспечивает не только проверку продукта на соответствие требованиям, но и соответствие заранее согласованному уровню качества продукта и готовность к выпуску продукта в Production. 
Quality Assurance - это выстроить систему, которая будет превентивно работать на качество продукта, т.е. предупреждать какие-то дефекты, либо же наладить процесс так, чтобы эти дефекты были найдены как можно раньше, еще до того, как продукт попадёт к разработчику.
Качество -То или иное свойство, достоинство, степень пригодности кого-чего-н.
Ка́чество програ́ммного обеспечения — способность программного продукта при заданных условиях удовлетворять установленным или предполагаемым потребностям (ISO/IEC 25000:2014). ... степень, в которой система, компонент или процесс удовлетворяют потребностям или ожиданиям заказчика или пользователя (IEEE Std 610.12-1990).
Начинать тестирование нужно на этапе составления требований к системе.
Завершать тестирование нужно, когда закончилось время/бюджет, или же когда все тестовые сценарии выполнены, или когда нашли баг блокер, который не позволяет дальнейшее тестирование.
Тестировщику платят деньги:
Безопасный бизнес. Тестировщик проверяет все возможные случаи на всех стадиях разработки ПО. Н-р, если не правильно работает корзина интернет магазина, бизнес будет иметь проблемы с оплатой товара и т.д.
Экономия денег. Гораздо дороже исправить ошибку, чем предотвратить её. Исправление одной ошибки может повлечь за собой другие, поэтому количество проблем будет быстро увеличиваться;
Защита репутации. Если выпустить багованный продукт и пользователи не будут довольны работой с ним, в дальнейшем их будет сложно убедить, что проблема решена и они могут снова им пользоваться. Первое впечатление сложно изменить, поэтому предоставьте качественный продукт. Если он не был протестирован вдоль и поперёк, то продукт может работать неправильно или не работать вовсе. 
Контроль процесса. Если процесс разработки не контролируется и идёт вразрез с установленными требованиями, итоговый продукт может сильно отличаться от запланированного.
Баг - ошибка, следствием которого является - дефект, а следствие дефекта - происходит сбой (failure). Дефект (баг) - это несоответствие фактического результата выполнения программы ожидаемому результату. 
Баг- репорт - это документ, который содержит полное описание бага и включает информацию как о самом баге, так и об условиях возникновения данного бага.
Структура баг- репорта 
Description, STR (Steps To Reproduce), Actual result (фактический результат), Expected result (ожидаемый результат), Fix versions, 
Priority, 
Правило названия бага. В заголовке вы обязательно должны ответить на три вопроса: ГДЕ? ЧТО? КОГДА? Где? - это может быть название вашего модуля, в котором вы обнаружили ваш баг. Что? - это непосредственно что происходит, когда вы обнаруживаете ваш баг, т.е. то, к чему привёл ваш дефект. Когда? - при каких условиях это происходит. 
Атрибуты баг-репорта
Описание проблемы, название проекта. Компонент, в котором непосредственно был обнаружен данный дефект. Версия билда. 
Серьезность (severity), т.е., по сути, это критичность нашего бага. 
Т.е. степень влияния данного бага на наше приложение. В баг-трекинговой системе severity обычно обозначает тестировщик. 
Blocker, critical, major, minor, trivial.
Приоритет (priority) - обозначает очередь исправления данного бага. Обычно его выставляет РМ, т.е. Product Manager, и он решает, какой баг будет фиксится первым. High, medium, low.
Статус, т.е. это статус нашего бага в его жизненном цикле. 
Автор.
Уровни тестирования
Модульное / Компонентное / Unit тестирование
Модульное / Компонентное / Unit тестирование фокусируется на компонентах / модулях, которые должны быть проверены в изоляции, как самостоятельные, независимые блоки.
Характеристики модульного тестирования
Цель: проверка правильности реализации функциональных / нефункциональных требований в модуле, раннее обнаружение ошибок
Объект: модуль / компонент / unit
Базис: дизайн системы, код, спецификация компонента
Типичные ошибки: ошибка в реализации требований, ошибка в коде
Ответственный: разработчик (редко тестировщик)

На этом уровне тестирования создаются модульные тесты (unit тесты), которые проверяют правильность работы модуля в тестовых условиях. Эти проверки всегда автоматизированы и выполняются очень быстро (несколько тысяч тестов в минуту).
Интеграционное тестирование
Интеграционное тестирование фокусируется на взаимодействии между компонентами / модулями / под-системами / системами.
Выделяют 2 подтипа:
Компонентное интеграционное тестирование — проверяет связи между компонентами. Может быть автоматизировано.
Системное интеграционное тестирование — проверяет связи между под-системами / системами. Не всегда можно автоматизировать, так как часто интеграция происходит с внешним сервисом, к которому мы не имеем доступа.
Характеристики интеграционного тестирования
Цель: проверка правильности реализации взаимодействия между компонентами / модулями / частями системы
Объект: модули, состоящие из нескольких компонентов; под-системы, API, микросервисы
Базис: дизайн системы, архитектура системы, описание связей компонентов
Типичные ошибки: отсутствие / неправильные связи между элементами системы, неправильные передаваемые данные, отсутствие обработки ошибок, отказы и падения при обращениях к API
Ответственный: разработчик и тестировщик
 
Системное тестирование
Системное тестирование фокусируется на поведении всей системы в целом с точки зрения конечных пользователей.
Внимание уделяется задачам, на решение которых направлена система. Также во внимание берется нефункциональное поведение системы (скорость работы, нагрузка, и т.п.) при выполнении бизнес-задач.
Системное тестирование может проверять выполнение стандартов или законодательных / нормативных требований.
Тестовая среда для системного тестирования должна быть максимально приближенной (в идеальном варианте — идентичной) к окружению для эксплуатации (production).
Характеристики системного тестирования
Цель: проверка работы системы в целом
Объект: система, конфигурации системы, рабочее окружение
Базис: системные требования, бизнес требования, сценарии использования, User Stories, системные руководства, инструкции
Типичные ошибки: невозможность выполнять функциональные задачи, для которых создавалась система, неправильная передача данных внутри системы, неспособность системы работать правильно в среде эксплуатации, нефункциональные сбои (уязвимости, зависания, выключения)
Ответственный: тестировщик
 
Приемочное тестирование
Приемочное тестирование фокусируется на готовности всей системы в целом.
Существуют несколько форм приемочного тестирования:
Пользовательское приемочное тестирование (User Acceptance testing, UAT) — проверяет пригодность системы к эксплуатации конечными пользователями.
Контрактное приемочное тестирование — проводится в соответствии с критериями, указанными в контракте приемки специального ПО.
Альфа-тестирование (alpha testing) и бета-тестирование (beta-testing) — используются для получения обратной связи от потенциальных или существующих клиентов. 
Альфа-тестирование проводится “внутри” компании, без участия разработчиков / тестировщиков продукта. 
Бета-тестирование проводится реальными пользователями системы.

